import os
import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
import matplotlib.animation as animation

plt.rcParams['axes.grid'] = True
plt.style.use('dark_background')


def two_body_eqm(_y, _t, _G, _m1, _m2):
    """
    differential equations of motion describing the two-body-problem
    _t: discrete time step value
    _y: state vector
    """
    # magnitude of position vector from r1 to r2
    r_mag = np.linalg.norm(_y[3:6] - _y[:3])
    c0 = _y[6:12]
    c1 = _G * _m2 * ((_y[3:6] - _y[:3]) / np.power(r_mag, 3))
    c2 = _G * _m1 * ((_y[:3] - _y[3:6]) / np.power(r_mag, 3))
    return np.concatenate((c0, c1, c2))



# simulation harness

# universal gravitation constant
G = 6.67259e-20  

# time array
time = np.arange(0, 480, 0.5)

# body m1 initial conditions
m1 = 1e26  
r10 = np.array([0, 0, 0])  
v10 = np.array([10, 20, 30]) 

# body m2 initial conditions
m2 = 1e26  
r20 = np.array([3000, 0, 0])  
v20 = np.array([0, 40, 0]) 


y0 = np.concatenate((r10, r20, v10, v20))



# simulation results
state_history = []

y = odeint(two_body_eqm, y0, time, args=(G, m1, m2))

for yk in y:
    # extract inertial positions of body 1 and body 2
    r1 = yk[:3]
    r2 = yk[3:6]

    # determine position of centre of mass
    rg = ((m1 * r1) + (m2 * r2)) / (m1 + m2)

    # position vector from m1 to m2
    r12 = r2 - r1

    # position vector from m1 to g
    r1g = rg - r1

    # position vector from g to m1
    rg1 = r1 - rg

    # position vector from g to m2
    rg2 = r2 - rg

    
    state_history.append(np.concatenate((yk, rg, r12, r1g, rg1, rg2), axis=None))

# convert list to numpy array
state_history = np.array(state_history)